type RolePermission {
  id: ID!
  role_id: String
  permission_id: String
  can_do_the_action: Boolean
  created_at: String
  updated_at: String
}

input CreateRolePermissionInput {
  can_do_the_action: Boolean!
  permission_id: String!
  role_id: String!
}

input UpdateRolePermissionInput {
  data: CreateRolePermissionInput
  entity_id: ID!
}

input RolePermissionQuery {
  can_do_the_action: Boolean
  permission_id: String
  role_id: String
}

type RolePermissionQuerySchema {
  data: [RolePermission]
  meta_data: MetaData
}

extend type Query {
  getARolePermission(entity_id: ID!): RolePermission @auth(roles: ["admin", "developer"])
  getRolePermissions(query: RolePermissionQuery, options: Options): RolePermissionQuerySchema
    @auth(roles: ["admin", "developer"])
}

extend type Mutation {
  assignPermission(input: CreateRolePermissionInput!): RolePermission @auth(roles: ["admin", "developer"])
  updateRolePermission(input: UpdateRolePermissionInput!): RolePermission @auth(roles: ["admin", "developer"])
  removePermission(entity_id: ID!): RolePermission @auth(roles: ["admin", "developer"])
}
