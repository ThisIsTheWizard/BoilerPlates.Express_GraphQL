type RoleUser {
  id: ID!
  role_id: String
  user_id: String
  created_at: String
  updated_at: String
}

input CreateRoleUserInput {
  role_id: String!
  user_id: String!
}

input UpdateRoleUserInput {
  entity_id: ID!
  data: CreateRoleUserInput
}

input RoleUserQuery {
  role_id: String
  user_id: String
}

type RoleUserQuerySchema {
  data: [RoleUser]
  meta_data: MetaData
}

extend type Query {
  getARoleUser(entity_id: ID!): RoleUser @auth(roles: ["admin", "developer"])
  getRoleUsers(query: RoleUserQuery, options: Options): RoleUserQuerySchema @auth(roles: ["admin", "developer"])
}

extend type Mutation {
  assignRole(input: CreateRoleUserInput!): RoleUser @auth(roles: ["admin", "developer"])
  updateRoleUser(input: UpdateRoleUserInput!): RoleUser @auth(roles: ["admin", "developer"])
  removeRole(entity_id: ID!): RoleUser @auth(roles: ["admin", "developer"])
}
