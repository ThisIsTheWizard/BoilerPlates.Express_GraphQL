type Role {
  id: ID
  created_at: String
  description: String
  name: String
  permissions: [Permission]
  updated_at: String
  users: [User]
}

input CreateRoleInput {
  name: String!
  description: String
}

input UpdateRoleInput {
  entity_id: ID!
  data: CreateRoleInput
}

input RoleQuery {
  name: String
  search_keyword: String
}

type RoleQuerySchema {
  data: [Role]
  meta_data: MetaData
}

extend type Query {
  getARole(entity_id: ID!): Role @auth(roles: ["admin", "developer"])
  getRoles(query: RoleQuery, options: Options): RoleQuerySchema @auth(roles: ["admin", "developer"])
}

extend type Mutation {
  createRole(input: CreateRoleInput!): Role @auth(roles: ["admin", "developer"])
  updateRole(input: UpdateRoleInput!): Role @auth(roles: ["admin", "developer"])
  deleteRole(entity_id: ID!): Role @auth(roles: ["admin", "developer"])
}
