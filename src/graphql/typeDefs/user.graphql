type User {
  id: ID
  email: String
  first_name: String
  last_name: String
  status: String
  created_at: String
  updated_at: String
}

input CreateUserInput {
  email: String!
  first_name: String!
  last_name: String!
  password: String!
}

input UpdateUserInput {
  entity_id: ID!
  data: CreateUserInput
}

input UserQuery {
  email: String
  status: String
  search_keyword: String
}

type UserQuerySchema {
  data: [User]
  meta_data: MetaData
}

# Root query
type Query {
  getAUser(entity_id: ID!): User @auth(roles: ["admin", "developer"])
  getUsers(query: UserQuery, options: Options): UserQuerySchema @auth(roles: ["admin", "developer"])
}

# Root mutation
type Mutation {
  createUser(input: CreateUserInput!): User @auth(roles: ["admin", "developer"])
  updateUser(input: UpdateUserInput!): User @auth(roles: ["admin", "developer"])
  deleteUser(entity_id: ID!): User @auth(roles: ["admin", "developer"])
}
